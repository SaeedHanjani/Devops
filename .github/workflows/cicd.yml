name: CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install -r requirements.txt

      - name: Send Telegram Alarm
        run: |
          python telegram_alarm.py "${{ secrets.TELEGRAM_BOT_TOKEN }}" "${{ secrets.TELEGRAM_CHAT_ID }}" "Build completed successfully on branch ${{ github.ref_name }}."
      
      - name: Run unit tests
        run: |
          python -m unittest discover -s tests

  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Save version
        id: version
        run: echo "VERSION=$(cat .version)" >> $GITHUB_ENV

      - name: Send Telegram Alarm on Failure
        if: failure()
        run: |
          python telegram_alarm.py "${{ secrets.TELEGRAM_BOT_TOKEN }}" "${{ secrets.TELEGRAM_CHAT_ID }}" "CI/CD pipeline failed on branch ${{ github.ref_name }}."


          release:
            needs: test
            runs-on: ubuntu-latest
            steps:
             - name: Checkout code
               uses: actions/checkout@v3
               with:
                fetch-depth: 0
    
             - name: Python Semantic Release
               uses: python-semantic-release/python-semantic-release@master
               with:
                github_token: ${{ secrets.GITHUB_TOKEN }}